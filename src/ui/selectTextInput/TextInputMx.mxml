<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:mx="library://ns.adobe.com/flex/mx" 
                   width="100%" height="32"
                   creationComplete="init(event)"
				   xmlns:button="ui.selectTextInput.*">
    
    <fx:Script>
        <![CDATA[            
            import mx.collections.ArrayCollection;
            import mx.collections.ArrayList;
            import mx.events.FlexEvent;
            
            import spark.components.DataGrid;
            import spark.components.gridClasses.GridColumn;
            
            //the collection on which the search is to be applied
            [Bindable]public var searchListCollection:ArrayCollection;
            
            //use the datagrid for getting the filter field labels
            [Bindable]public var dataGrid:DataGrid;
            
            [Bindable]private var columns:ArrayList;
            
            protected function searchTextChangeHandler(event:Event):void
            {
                doSearch();
            }
            
            //exposed public method to be called to force search from other pages
            public function doSearch():void
            {
                if(fieldSelector.selectedIndex!=-1 && searchListCollection!=null){
                    searchListCollection.filterFunction=searchFilterFunction;
                    searchListCollection.refresh();
                }
            }
            
            private function searchFilterFunction(item:Object):Boolean
            {
                if (fieldSelector.selectedItem.dataField != 'any') {
					trace("sear  "+fieldSelector);
                    return searchOperation(item,fieldSelector.selectedItem,searchText.text);    
                }else{
                    
                    //1. starting iteration from index 1 since index 0 is the 'any' column for search
                    for(var i:Number=1;i<columns.length;i++){
                        //2. call the search operation for each row
                        //3. even if one column matches return the row
                        if(searchOperation(item,columns.getItemAt(i) as GridColumn,searchText.text)==true){
                            return true;
                        }
                    }
                }
                //if none of the columns satisfied the filter then you can return false
                return false;        
            }
            
            private function searchOperation(item:Object,gridColumn:GridColumn,searchWord:String):Boolean
            {
                //when the search text is empty show all text
                if(searchWord==''){
                    return true;
                }
                
                //for complex object hierarchies walk through the object 
                //get the last string object in the chain you are filtering
                var object:Object=item;
                
                var selectedField:String = gridColumn.dataField;
                
                var tokens:Array = selectedField.split(".");
                
                for(var i:int=0;i<tokens.length;i++){
                    //if the object is null at any instance return false
                    //since we will not be able to walk down a null object tree
                    if(object==null){
                        return false;
                    }
                    object=object[tokens[i]];
                }
                
                //check again if the object is not null
                if(object==null){
                    return false;
                }
                
                //do the actual search
                return object.toString().search(new RegExp(searchWord,"i")) > -1;
            }
            
            //we know for sure it is a grid column
            //we can get the drop down label
            protected function getGridColumnLabel(item:GridColumn):String
            {
                return item.headerText;
            }
            
            protected function init(event:FlexEvent):void
            {
                // get all the columns
                columns=dataGrid.columns as ArrayList;
                //insert the any column and make it invisible
                var anyColumn:GridColumn=new GridColumn();
                anyColumn.headerText='Any Column(*)';
                anyColumn.dataField='any';
                anyColumn.visible=false;
                columns.addItemAt(anyColumn,0);
            }
            
        ]]>
    </fx:Script>
    
        <s:TextInput id="searchText" height="20" width="212" borderColor="0x639ACE" fontSize="11" top="67" left="369"
							   skinClass="ui.selectTextInput.TextInputSkin"/>
        <s:DropDownList id="fieldSelector" dataProvider="{dataGrid.columns}" selectedIndex="1" visible="false"
                        labelFunction="getGridColumnLabel"/>
		<button:IconButton skinClass="ui.selectTextInput.ButtonSearchSkin" click="searchTextChangeHandler(event)" height="20" width="21" top="67" left="581"/>
   
    
</s:Group>